	@PrePersist
	@PreUpdate
  @PostConstruct
  public void init() {

		IntStream.range(0, 41).forEach(index -> {
			userManagement.register(new Username("user" + index), Password.raw("foobar"));
		});
	}
  
  rejectIfEmptyOrWhitespace(errors, "username", "user.username.empty");
  	default void validate(BindingResult errors, UserManagement userManagement) {

			rejectIfEmptyOrWhitespace(errors, "username", "user.username.empty");
			rejectIfEmptyOrWhitespace(errors, "password", "user.password.empty");
			rejectIfEmptyOrWhitespace(errors, "repeatedPassword", "user.repeatedPassword.empty");

			if (!getPassword().equals(getRepeatedPassword())) {
				errors.rejectValue("repeatedPassword", "user.password.no-match");
			}

			try {

				userManagement.findByUsername(new Username(getUsername())).ifPresent(
						user -> errors.rejectValue("username", "user.username.exists"));

			} catch (IllegalArgumentException o_O) {
				errors.rejectValue("username", "user.username.invalidFormat");
			}
		}
		
		
  import static org.springframework.validation.ValidationUtils.*;
  
  @EqualsAndHashCode(of = "id")
  
